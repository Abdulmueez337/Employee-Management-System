// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Abdulmueez337/EmployeeManagementSystemProject/gen/models"
)

// ShowEmployeeOKCode is the HTTP code returned for type ShowEmployeeOK
const ShowEmployeeOKCode int = 200

/*ShowEmployeeOK Found

swagger:response showEmployeeOK
*/
type ShowEmployeeOK struct {

	/*
	  In: Body
	*/
	Payload *models.EmployeeOfficial `json:"body,omitempty"`
}

// NewShowEmployeeOK creates ShowEmployeeOK with default headers values
func NewShowEmployeeOK() *ShowEmployeeOK {

	return &ShowEmployeeOK{}
}

// WithPayload adds the payload to the show employee o k response
func (o *ShowEmployeeOK) WithPayload(payload *models.EmployeeOfficial) *ShowEmployeeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show employee o k response
func (o *ShowEmployeeOK) SetPayload(payload *models.EmployeeOfficial) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowEmployeeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ShowEmployeeBadRequestCode is the HTTP code returned for type ShowEmployeeBadRequest
const ShowEmployeeBadRequestCode int = 400

/*ShowEmployeeBadRequest Bad Request

swagger:response showEmployeeBadRequest
*/
type ShowEmployeeBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewShowEmployeeBadRequest creates ShowEmployeeBadRequest with default headers values
func NewShowEmployeeBadRequest() *ShowEmployeeBadRequest {

	return &ShowEmployeeBadRequest{}
}

// WithPayload adds the payload to the show employee bad request response
func (o *ShowEmployeeBadRequest) WithPayload(payload string) *ShowEmployeeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show employee bad request response
func (o *ShowEmployeeBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowEmployeeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ShowEmployeeUnauthorizedCode is the HTTP code returned for type ShowEmployeeUnauthorized
const ShowEmployeeUnauthorizedCode int = 401

/*ShowEmployeeUnauthorized Unotherized

swagger:response showEmployeeUnauthorized
*/
type ShowEmployeeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewShowEmployeeUnauthorized creates ShowEmployeeUnauthorized with default headers values
func NewShowEmployeeUnauthorized() *ShowEmployeeUnauthorized {

	return &ShowEmployeeUnauthorized{}
}

// WithPayload adds the payload to the show employee unauthorized response
func (o *ShowEmployeeUnauthorized) WithPayload(payload string) *ShowEmployeeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show employee unauthorized response
func (o *ShowEmployeeUnauthorized) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowEmployeeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ShowEmployeeNotFoundCode is the HTTP code returned for type ShowEmployeeNotFound
const ShowEmployeeNotFoundCode int = 404

/*ShowEmployeeNotFound Not Found

swagger:response showEmployeeNotFound
*/
type ShowEmployeeNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewShowEmployeeNotFound creates ShowEmployeeNotFound with default headers values
func NewShowEmployeeNotFound() *ShowEmployeeNotFound {

	return &ShowEmployeeNotFound{}
}

// WithPayload adds the payload to the show employee not found response
func (o *ShowEmployeeNotFound) WithPayload(payload string) *ShowEmployeeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show employee not found response
func (o *ShowEmployeeNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowEmployeeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ShowEmployeeInternalServerErrorCode is the HTTP code returned for type ShowEmployeeInternalServerError
const ShowEmployeeInternalServerErrorCode int = 500

/*ShowEmployeeInternalServerError Internal Server Error

swagger:response showEmployeeInternalServerError
*/
type ShowEmployeeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewShowEmployeeInternalServerError creates ShowEmployeeInternalServerError with default headers values
func NewShowEmployeeInternalServerError() *ShowEmployeeInternalServerError {

	return &ShowEmployeeInternalServerError{}
}

// WithPayload adds the payload to the show employee internal server error response
func (o *ShowEmployeeInternalServerError) WithPayload(payload string) *ShowEmployeeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show employee internal server error response
func (o *ShowEmployeeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowEmployeeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
