// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteEmployeeOKCode is the HTTP code returned for type DeleteEmployeeOK
const DeleteEmployeeOKCode int = 200

/*DeleteEmployeeOK Successfully Deleted

swagger:response deleteEmployeeOK
*/
type DeleteEmployeeOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteEmployeeOK creates DeleteEmployeeOK with default headers values
func NewDeleteEmployeeOK() *DeleteEmployeeOK {

	return &DeleteEmployeeOK{}
}

// WithPayload adds the payload to the delete employee o k response
func (o *DeleteEmployeeOK) WithPayload(payload string) *DeleteEmployeeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete employee o k response
func (o *DeleteEmployeeOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteEmployeeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteEmployeeBadRequestCode is the HTTP code returned for type DeleteEmployeeBadRequest
const DeleteEmployeeBadRequestCode int = 400

/*DeleteEmployeeBadRequest Bad Request

swagger:response deleteEmployeeBadRequest
*/
type DeleteEmployeeBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteEmployeeBadRequest creates DeleteEmployeeBadRequest with default headers values
func NewDeleteEmployeeBadRequest() *DeleteEmployeeBadRequest {

	return &DeleteEmployeeBadRequest{}
}

// WithPayload adds the payload to the delete employee bad request response
func (o *DeleteEmployeeBadRequest) WithPayload(payload string) *DeleteEmployeeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete employee bad request response
func (o *DeleteEmployeeBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteEmployeeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteEmployeeUnauthorizedCode is the HTTP code returned for type DeleteEmployeeUnauthorized
const DeleteEmployeeUnauthorizedCode int = 401

/*DeleteEmployeeUnauthorized Unotherized

swagger:response deleteEmployeeUnauthorized
*/
type DeleteEmployeeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteEmployeeUnauthorized creates DeleteEmployeeUnauthorized with default headers values
func NewDeleteEmployeeUnauthorized() *DeleteEmployeeUnauthorized {

	return &DeleteEmployeeUnauthorized{}
}

// WithPayload adds the payload to the delete employee unauthorized response
func (o *DeleteEmployeeUnauthorized) WithPayload(payload string) *DeleteEmployeeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete employee unauthorized response
func (o *DeleteEmployeeUnauthorized) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteEmployeeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteEmployeeNotFoundCode is the HTTP code returned for type DeleteEmployeeNotFound
const DeleteEmployeeNotFoundCode int = 404

/*DeleteEmployeeNotFound Not Found

swagger:response deleteEmployeeNotFound
*/
type DeleteEmployeeNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteEmployeeNotFound creates DeleteEmployeeNotFound with default headers values
func NewDeleteEmployeeNotFound() *DeleteEmployeeNotFound {

	return &DeleteEmployeeNotFound{}
}

// WithPayload adds the payload to the delete employee not found response
func (o *DeleteEmployeeNotFound) WithPayload(payload string) *DeleteEmployeeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete employee not found response
func (o *DeleteEmployeeNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteEmployeeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteEmployeeInternalServerErrorCode is the HTTP code returned for type DeleteEmployeeInternalServerError
const DeleteEmployeeInternalServerErrorCode int = 500

/*DeleteEmployeeInternalServerError Internal Server Error

swagger:response deleteEmployeeInternalServerError
*/
type DeleteEmployeeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteEmployeeInternalServerError creates DeleteEmployeeInternalServerError with default headers values
func NewDeleteEmployeeInternalServerError() *DeleteEmployeeInternalServerError {

	return &DeleteEmployeeInternalServerError{}
}

// WithPayload adds the payload to the delete employee internal server error response
func (o *DeleteEmployeeInternalServerError) WithPayload(payload string) *DeleteEmployeeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete employee internal server error response
func (o *DeleteEmployeeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteEmployeeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
